{%- macro to_scala_return_type(type) -%}
  {%- if type == "string" -%}
    String
  {%- elif type == "string[]" -%}
    Seq[String]
  {%- elif type == "boolean" -%}
    Boolean
  {%- elif type == "int" -%}
    Long
  {%- elif type == "double" -%}
    Double
  {%- else -%}
    {{type}}
  {%- endif -%}
{%- endmacro %}

{%- macro to_scala_key_type(type) -%}
  {%- if type == "string" -%}
    string
  {%- elif type == "string[]" -%}
    stringSeq
  {%- elif type == "boolean" -%}
    boolean
  {%- elif type == "int" -%}
    long
  {%- elif type == "double" -%}
    double
  {%- else -%}
    {{type | to_camelcase(False)}}
  {%- endif -%}
{%- endmacro %}

{%- macro print_value(type, value) -%}
  {{ "\"" if type == "String"}}{{value}}{{ "\"" if type == "String"}}
{%- endmacro %}

{%- macro stable_class_ref(const_name, separator) -%}
{{stablePkg}}.{{ root_namespace | to_camelcase(True) }}Attributes{{separator}}{{const_name}}
{%- endmacro %}

{%- if filter != 'any' %}
{%- set filtered_attributes = attributes_and_templates | select(filter) | list %}
{%- else %}
{%- set filtered_attributes = attributes_and_templates | list %}
{%- endif %}

{%- set filtered_enums = filtered_attributes | selectattr('is_enum', 'equalto', true) | list %}
{%- set excluded_namespaces_list = excluded_namespaces.replace("\"", "").split(' ') %}

{%- if root_namespace not in excluded_namespaces_list and filtered_attributes | count > 0 -%}
/*
 * Copyright 2023 Typelevel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package {{pkg | trim}}

import org.typelevel.otel4s.AttributeKey
import org.typelevel.otel4s.AttributeKey._

// DO NOT EDIT, this is an Auto-generated file from buildscripts/semantic-convention{{template}}
object {{ root_namespace | to_camelcase(True) }}{{ classPrefix }}Attributes {

  {%- for attribute in filtered_attributes %}

  {% set attribute_const_name = attribute.fqn | to_camelcase(True) -%}

  /**
  * {{ attribute.brief | regex_replace(pattern='\\$', replace='') | render_markdown(code="`{0}`", paragraph="{0}") }}
    {%- if attribute.note %}
  *
  * @note {{attribute.note | render_markdown(code="`{0}`", paragraph="\n  *  - {0}", list="{0}")}}
    {%- endif %}
  */
  {%- if attribute | is_deprecated %}
  @deprecated("{{attribute.brief | regex_replace("Deprecated\, ", "") | replace('"', "'") | capitalize | to_doc_brief}}", "0.5.0")
  {%- elif attribute | is_stable and stablePkg != "" %}
  @deprecated("use `{{stable_class_ref(attribute_const_name, '.')}}` instead.", "0.5.0")
  {%- endif %}
  {%- if attribute | is_template %}
  val {{attribute_const_name}}: AttributeKey[{{to_scala_return_type(attribute.instantiated_type | string) | first_up}}] = {{to_scala_key_type(attribute.instantiated_type | string)}}("{{attribute.fqn}}")
  {%- else %}
  val {{attribute_const_name}}: AttributeKey[{{to_scala_return_type(attribute.attr_type | string) | first_up}}] = {{to_scala_key_type(attribute.attr_type | string)}}("{{attribute.fqn}}")
  {%- endif %}
  {%- endfor %}

  {%- if filtered_enums | count > 0 %}
  // Enum definitions
  {% endif %}
  {%- for enum_attribute in filtered_enums %}
  {%- set class_name = enum_attribute.fqn | to_camelcase(True) ~ "Value" %}
  {%- set type = to_scala_return_type(enum_attribute.attr_type.enum_type) %}
  /**
   * Values for [[{{ enum_attribute.fqn | to_camelcase(True) }}]].
   */
  {%- if enum_attribute | is_deprecated %}
  @deprecated("{{enum_attribute.brief | regex_replace("Deprecated\, ", "") | replace('"', "'") | capitalize | to_doc_brief}}", "0.5.0")
  {%- elif enum_attribute | is_stable and stablePkg != "" %}
  @deprecated("use `{{stable_class_ref(class_name, '.')}}` instead.", "0.5.0")
  {%- endif %}
  abstract class {{ class_name }}(val value: {{ type }})
  {%- if (enum_attribute | is_deprecated) or (enum_attribute | is_stable and stablePkg != "") %}
  @annotation.nowarn("cat=deprecation")
  {%- endif  %}
  object {{ class_name }} {
    {%- for member in enum_attribute.attr_type.members %}
    /** {% filter escape %}{{member.brief | to_doc_brief}}.{% endfilter %} */
    case object {{ member.member_id | to_camelcase(True) }} extends {{class_name}}({{ print_value(type, member.value) }})
    {%- endfor  %}
    {%- if class_name == "TelemetrySdkLanguageValue" %}
    /** scala. */
    case object Scala extends TelemetrySdkLanguageValue("scala")
    {%- endif %}
  }

  {%- endfor %}

}
{%- endif %}